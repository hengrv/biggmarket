generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}


model Item{
    id                       Int @id @default(autoincrement())
    image                    String 
    description              String?
    category                 String
    status                   Boolean @default(false)
    userId                   String
    createdById              String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    //createdBy                User @relation(fields: [createdById], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    transactions Transaction[]

}

model Transaction{
    id                      String @id @default(cuid())
    giverId                 String
    receiverId              String
    itemId                  Int

    giver                   User @relation(name: "giver" ,fields: [giverId], references: [id])
    receiver                User @relation(name: "receiver", fields: [receiverId], references: [id])
    item                    Item @relation(fields: [itemId], references: [id])

    createdAt DateTime @default(now()) 
}

=======
>>>>>>> a3aaa19ded073ba682838502e678ccbdc6ea68f1
// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}


model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    items         Item[]
<<<<<<< HEAD
    role          String @default("end_user")
    location      String[]
    givenTransactions Transaction[] @relation("giver")
    receivedTransactions Transaction[] @relation("receiver")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
