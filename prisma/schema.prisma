generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}


// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?
    @@unique([provider, providerAccountId])
}


model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    items         Item[]
    swipes        Item[] @relation("ItemSwipes")
    matches       Int
    review        Float? @default(0)
    role          String @default("end_user")
    location      String[]
    logs Log[]
    swipes Swipes[]
}

// Enum for Item status
enum ItemStatus {
    AVAILABLE
    SWAPPED
    HIDDEN
}

model Item {
    id            String      @id @default(cuid())
    image         String[]    // URL
    userId        String
    description   String?
    category      String
    status        ItemStatus @default(AVAILABLE)
    review        Float?   @default(0) @db.DoublePrecision
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    swipes        Swipes[]

    matches Matches[] @relation("user1")
    matches2 Matches[] @relation("user2")
    
    givenTransactions Transaction[] @relation("giver")
    receivedTransactions Transaction[] @relation("receiver")

    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    //transactions  Transaction[]
}

// model to keep track of matches between users
model Matches {
    id          String @id @default(cuid())
    item1id     String
    item2id     String
    status      machedStatus @default(PENDING)
    createdAt   DateTime @default(now())
    useritem1                Item @relation(name: "user1", fields: [item1id], references: [id], onDelete: Cascade)
    useritem2                Item @relation(name: "user2", fields: [item2id], references: [id], onDelete: Cascade)
}

enum machedStatus {
    PENDING
    ACCEPTED
    REJECTED
}

model Transaction{
    id                      String @id @default(cuid())
    giverId                 String
    receiverId              String
    completed               Boolean @default(false)
    createdAt               DateTime @default(now()) 
    giver                   Item @relation(name: "giver", fields: [giverId], references: [id], onDelete: Cascade)
    receiver                Item @relation(name: "receiver", fields: [receiverId], references: [id], onDelete: Cascade)
    logs                    Log[]    
}
// Log model to keep track of user actions
model Log{
    id              String @id @default(cuid())
    userId          String?
    transactionId   String?
    description     String
    createdAt       DateTime @default(now())
    ipAddress       String

    user        User? @relation(fields: [userId], references: [id], onDelete: Cascade)
    transaction Transaction? @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Swipes {
    id          String @id @default(cuid())
    userId      String
    itemId      String
    createdAt   DateTime @default(now())
    direction   SwipeDirection
    user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
    item        Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

enum SwipeDirection {
    LEFT
    RIGHT
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    @@unique([identifier, token])
}
