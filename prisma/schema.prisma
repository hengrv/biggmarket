generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User model to keep track of user data
model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    bio           String?   @default("up the toon")
    accounts      Account[]
    sessions      Session[]
    items         Item[]
    reviews       Review[]  @relation("reviewedUser")
    reviewed      Review[]  @relation("reviewerUser")
    role          String    @default("end_user")
    location      Location?
    logs          Log[]
    swipes        Swipe[]
    sender        Message[] @relation("sender")
    receiver      Message[] @relation("receiver")

    follower       Follow[] @relation("follower")
    following      Follow[] @relation("following")
    matchesAsUser1 Match[]  @relation("user1Matches")
    matchesAsUser2 Match[]  @relation("user2Matches")
}

model Location {
    id        String  @id @default(cuid())
    latitude  Decimal
    longitude Decimal
    postcode  String
    userId    String  @unique // 1 - 1 relationship - must be unique
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
    id           String   @id @default(cuid())
    userId       String
    reviewer     String
    rating       Float
    review       String
    createdAt    DateTime @default(now())
    user         User     @relation(name: "reviewedUser", fields: [userId], references: [id], onDelete: Cascade)
    reviewerUser User     @relation(name: "reviewerUser", fields: [reviewer], references: [id], onDelete: Cascade)
}

// Item model to keep track of user items
model Item {
    id          String     @id @default(cuid())
    title       String     @default("title")
    images      String[] // URLs
    userId      String
    description String
    category    String     @default("Other")
    status      ItemStatus @default(AVAILABLE)
    review      Float?     @default(0) @db.DoublePrecision
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    swipes      Swipe[]

    matches  Match[] @relation("user1")
    matches2 Match[] @relation("user2")

    givenTransactions    Transaction[] @relation("giver")
    receivedTransactions Transaction[] @relation("receiver")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enum for Item status
enum ItemStatus {
    AVAILABLE
    SWAPPED
    HIDDEN
}

// Model to keep track of item matches between user
model Match {
    id        String        @id @default(cuid())
    item1id   String
    item2id   String
    status    matchedStatus @default(PENDING)
    createdAt DateTime      @default(now())
    useritem1 Item          @relation(name: "user1", fields: [item1id], references: [id], onDelete: Cascade)
    useritem2 Item          @relation(name: "user2", fields: [item2id], references: [id], onDelete: Cascade)
    user1Id   String
    user2Id   String
    user1     User          @relation("user1Matches", fields: [user1Id], references: [id], onDelete: Cascade)
    user2     User          @relation("user2Matches", fields: [user2Id], references: [id], onDelete: Cascade)
}

// Enum for Match status
enum matchedStatus {
    PENDING
    ACCEPTED
    REJECTED
}

// Transaction model to keep track of item transactions
model Transaction {
    id         String   @id @default(cuid())
    giverId    String
    receiverId String
    completed  Boolean  @default(false)
    createdAt  DateTime @default(now())
    item1      Item     @relation(name: "giver", fields: [giverId], references: [id], onDelete: Cascade)
    item2      Item     @relation(name: "receiver", fields: [receiverId], references: [id], onDelete: Cascade)
    logs       Log[]
}

// Log model to keep track of user actions
model Log {
    id            String   @id @default(cuid())
    userId        String?
    transactionId String?
    description   String
    createdAt     DateTime @default(now())
    ipAddress     String

    user        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
    transaction Transaction? @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

// Swipes model to keep track of user swipes
model Swipe {
    id        String         @id @default(cuid())
    userId    String
    itemId    String
    createdAt DateTime       @default(now())
    direction SwipeDirection
    user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    item      Item           @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

// Enum for swipe direction
enum SwipeDirection {
    LEFT
    RIGHT
}

enum Category {
    Electronics
    Vehicles
    HomeAndFurniture
    ClothingAndAccessories
    SportsAndOutdoors
    ToysAndGames
    Leisure
    HealthAndBeauty
    BusinessAndIndustrial
    Other
}

model Message {
    id         String   @id @default(cuid())
    senderId   String
    receiverId String
    message1   String? // Sender message
    message2   String? // Receiver message
    chatId     String
    createdAt  DateTime @default(now())
    sender     User     @relation(fields: [senderId], references: [id], onDelete: Cascade, name: "sender")
    receiver   User     @relation(fields: [receiverId], references: [id], onDelete: Cascade, name: "receiver")
    chat       Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

// Chat model to keep track of user chats
model Chat {
    id        String    @id @default(cuid())
    messages  Message[]
    createdAt DateTime  @default(now())
}

model Follow {
    id          String   @id @default(cuid())
    followerId  String
    followingId String
    createdAt   DateTime @default(now())

    follower  User @relation(fields: [followerId], references: [id], onDelete: Cascade, name: "follower")
    following User @relation(fields: [followingId], references: [id], onDelete: Cascade, name: "following")

    @@unique([followerId, followingId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
